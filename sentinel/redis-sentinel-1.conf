# bind 127.0.0.1

# 哨兵的端口号
# 因为各个哨兵节点会运行在单独的Docker容器中
# 所以无需担心端口重复使用
# 如果需要在单机
port 26379

# 设定密码认证
#requirepass 123456

# 配置哨兵的监控参数
# 格式：sentinel monitor <master-name> <ip> <redis-port> <quorum>
# master-name是为这个被监控的master起的名字
# ip是被监控的master的IP或主机名。因为Docker容器之间可以使用容器名访问，所以这里写master节点的容器名
# redis-port是被监控节点所监听的端口号
# quorom设定了当几个哨兵判定这个节点失效后，才认为这个节点真的失效了
sentinel myid c7d5da9d1cb7065f826e7d5fad5b82eba098e4e6

# 连接主节点的密码
# 格式：sentinel auth-pass <master-name> <password>
sentinel deny-scripts-reconfig yes

# master在连续多长时间无法响应PING指令后，就会主观判定节点下线，默认是30秒
# 格式：sentinel down-after-milliseconds <master-name> <milliseconds>
sentinel monitor mymaster 192.168.0.35 6380 2
# Generated by CONFIG REWRITE
dir "/data"
sentinel down-after-milliseconds mymaster 3000
sentinel auth-pass mymaster 123456
sentinel config-epoch mymaster 3
sentinel leader-epoch mymaster 3
sentinel known-replica mymaster 192.168.0.35 6379
sentinel known-replica mymaster 192.168.0.35 6381
sentinel known-sentinel mymaster 172.18.0.6 26381 97440eacb711c0621ec8e17a1a34072371f7faa4
sentinel known-sentinel mymaster 172.18.0.7 26380 81481f55c39428d75f62fe78719114eda3fd9967
sentinel current-epoch 3
